#include <string.h>
#include <stdio.h>

enum {
  TK_INVALID,
  TK_TOO_BIG,
  TK_INT,
  TK_FLOAT,
  TK_STR,
  TK_ID,
  TK_KEY,
  TK_TRUE,
  TK_FALSE,
  TK_NIL,
  TK_BEGIN,
  TK_DEF,
  TK_ELLIPSIS,
  TK_IF,
  TK_FN,
  TK_LET,
  TK_LOOP,
  TK_QUOTE,
  TK_RECUR,
  TK_SET,
  TK_RAISE, TK_WITH_HANDLER,
  TK_ADD, TK_SUB, TK_MUL, TK_DIV, TK_MOD,
  TK_LT, TK_LE, TK_GT, TK_GE, TK_EQ,
  TK_AND, TK_OR, TK_NOT,
  TK_EOF
};

typedef struct {
  const char* buf;
  size_t buf_size;
  const char* p;
  const char* mark;
  int line;
  char val[128];
} SnapLex;

#define snap_lex_mark(lex) lex->mark = lex->p
#define snap_lex_rewind(lex) lex->p = lex->mark

%%{
  machine lex;
  write data;
}%%

static int copy_value(SnapLex* lex, const char* ts, const char* te, int token) {
  size_t token_size = te - ts;
  if (token_size >= sizeof(lex->val)) { // need space for '\0'
    return TK_TOO_BIG;
  }
  memcpy(lex->val, ts, token_size);
  lex->val[token_size] = '\0';
  return token;
}

int snap_lex_next_token(SnapLex* lex) {
  int token = TK_INVALID;

  const char* p = lex->p;
  const char* pe = lex->buf + lex->buf_size;
  const char* ts;
  const char* te;
  const char* eof = pe;
  int cs, act;

  if (p == eof) return TK_EOF;

  lex->val[0] = '\0';

  (void) lex_first_final;
  (void) lex_error;
  (void) lex_en_main;

  %%{
    ws = [ \t];
    comment = ";" [^\r\n]*;
    nl = '\r\n' | '\n';
    id = (alnum | [_\+\-\*\?/=,<>!])+;
    key = ':' id ;
    chars = '\'' | '(' | ')' | '[' | ']' | '{' | '}';
    integer = [\+\-]? digit+;
    floating = [\+\-]? ((digit+ ('.' digit+)?) | ('.' digit+) | (digit+ '.')) ([eE] [\+\-]? digit+)?;
    string = "\"" ([^\r\n\"] | "\\\"")* "\"";

    main := |*
      'begin' => { token = TK_BEGIN; fbreak; };
      'def' | 'define' => { token = TK_DEF; fbreak; };
      'if' => { token = TK_IF; fbreak; };
      'fn' => { token = TK_FN; fbreak; };
      'let' => { token = TK_LET; fbreak; };
      'loop' => { token = TK_LOOP; fbreak; };
      'quote' => { token = TK_QUOTE; fbreak; };
      'recur' => { token = TK_RECUR; fbreak; };
      'set!' => { token = TK_SET; fbreak; };
      'raise' => { token = TK_RAISE; fbreak; };
      'with-handler' => { token = TK_WITH_HANDLER; fbreak; };
      'true' => { token = TK_TRUE; fbreak; };
      'false' => { token = TK_FALSE; fbreak; };
      'nil' => { token = TK_NIL; fbreak; };
      '...' => { token = TK_ELLIPSIS; fbreak; };
      '+' => { token = TK_ADD; fbreak; };
      '-' => { token = TK_SUB; fbreak; };
      '*' => { token = TK_MUL; fbreak; };
      '/' => { token = TK_DIV; fbreak; };
      '%' => { token = TK_MOD; fbreak; };
      '<' => { token = TK_LT; fbreak; };
      '<=' => { token = TK_LE; fbreak; };
      '>' => { token = TK_GT; fbreak; };
      '>=' => { token = TK_GE; fbreak; };
      '=' => { token = TK_EQ; fbreak; };
      'not' => { token = TK_NOT; fbreak; };
      'and' => { token = TK_AND; fbreak; };
      'or' => { token = TK_OR; fbreak; };
      chars => { token = *ts; fbreak; };
      integer => { token = copy_value(lex, ts, te, TK_INT); fbreak; };
      floating => { token = copy_value(lex, ts, te, TK_FLOAT); fbreak; };
      string => { token = copy_value(lex, ts + 1, te - 1, TK_STR); fbreak; };
      id => { token = copy_value(lex, ts, te, TK_ID); fbreak; };
      key => { token = copy_value(lex, ts + 1, te, TK_KEY); fbreak; };
      nl => { lex->line++; };
      ws => { /* Skip */ };
      comment => { /* Skip */ };
      any => { token = TK_INVALID; fbreak; };
    *|;

    write init;
    write exec;
  }%%

  token = token == TK_INVALID && p == eof ? TK_EOF : token;
  lex->p = p;

  return token;
}
