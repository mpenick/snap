; vi: filetype=scheme

; args
(print "args:" args)

; tail recursion
(print "tail recursion:")
(def countdown (fn (x)
           (if (> x 0)
             (do (print x) (recur (sub x 1)))
             0)
           ))

(print
  (countdown 10))

; let
(print "let:")
(print (let ((a 1)
             (b 2))
         (add a b)))

; closure
(print "closure:")
(def inc (fn (x)
             (fn ()
                 (do
                   (set! x (add x 1))
                   x)
                 )
             ))

(def inc1 (inc 0))
(print (inc1))
(print (inc1))
(print (inc1))
(print (inc1))

; recursion
(print "recursion:")
(def fact (fn (n)
              (if (= n 1) 1
                (mul n (fact (sub n 1)))
                )
              ))
(print (fact 20))

; loop
(print "loop:")
(def i 0)
(print
  ((fn (n)
        (print n) (set! i (add i 10)) (if (< n 9) (recur (add n 1)) n)
        ) 0)
  )
(print i)

; fibonacci
(print "fibonacci:")
(def fib
     (fn (c p n)
         (print c)
         (if (> n 0)
           (recur p (add c p) (sub n 1))
            nil
           )
         )
     )
(fib 1 1 10)

; error
(print "errors:")
(def nested (fn ()
             (try
               (try
                 (throw 1 "Error happened")
                 (fn (e) (do (print "Inner handler") (throw 2 "Error in inner handler happened")))
                 )
               (fn (e) (do (print "Outer handler") (throw 3 "Error in outer handler happened")))
               )
             ))
(try
  (nested)
  (fn (e) (print "Error calling func"))
  )

(def recerr (fn (n)
             (print n)
             (if (= n 1)
               (do (print "Going to throw") (throw 4 "Inside a recursive func"))
               (err (sub n 1)))
             )
     )

(try
  (recerr 10)
  (fn (e) (print "From a recursive func"))
  )
